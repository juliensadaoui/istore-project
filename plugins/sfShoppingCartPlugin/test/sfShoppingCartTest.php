<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../lib/sfShoppingCartInterface.class.php';
require_once dirname(__FILE__) . '/../lib/sfShoppingCartItem.class.php';
require_once dirname(__FILE__) . '/../lib/sfShoppingCart.class.php';

/**
 * Test class for sfShoppingCart.
 * Generated by PHPUnit on 2010-10-31 at 19:38:04.
 */
class sfShoppingCartTest extends PHPUnit_Framework_TestCase {

    /**
     * @var sfShoppingCart
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new sfShoppingCart();

        // item 1
        $item = new sfShoppingCartItem();
        $item->setId(1);
        $item->setPrice(14.4);
        $item->setQuantity(8);
        $item->setWeight(14.5);
        $item->setClass('IStoreShoppingCartItem');
        $this->object->addItem($item);

        // item 1
        $item = new sfShoppingCartItem();
        $item->setId(2);
        $item->setPrice(299.9);
        $item->setQuantity(3);
        $item->setWeight(8);
        $item->setClass('IStoreShoppingCartItem');
        $this->object->addItem($item);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function assertPreConditions()  {
        $this->assertFalse($this->object->isEmpty());
    }

    /**
     * Test la méthode qui récuperer un article dans le panier
     */
    public function testGetItem()
    {
        $item = $this->object->getItem(1, 'IStoreShoppingCartItem');
        $this->assertNotNull($item);

        // test les valeurs de l'objet
        $this->assertEquals($item->getId(),1);
        $this->assertEquals($item->getPrice(), 14.4);
        $this->assertEquals($item->getQuantity(), 8);
        $this->assertEquals($item->getWeight(), 14.5);
        $this->assertEquals($item->getClass(), 'IStoreShoppingCartItem');
    }

    /**
     * Test la méthode qui ajoute un article dans le panier
     */
    public function testAddItem() {
        // on ajoute un item
        $item = new sfShoppingCartItem();
        $item->setId(3);
        $item->setClass('IStoreShoppingCartItem');
        $this->object->addItem($item);

        // on test si il existe
        $item = null;
        $item = $this->object->getItem(3, 'IStoreShoppingCartItem');
        $this->assertNotNull($item);
    }

    /**
     *  Test la méthode qui supprime un article du panier
     */
    public function testRemoveItem() {
        // supprime l'article d'identifiant 3
        $this->object->removeItem(3, 'IStoreShoppingCartItem');

        $item = $this->object->getItem(3, 'IStoreShoppingCartItem');
        $this->assertNull($item);
    }

    /**
     * Test la méthode qui teste si le panier est vide
     */
    public function testIsEmpty() {
        $isEmpty = $this->object->isEmpty();
        $this->assertFalse($isEmpty);
    }

    /**
     *  Test la méthode qui retourne le nombre total d'article
     */
    public function testCountItem() {
        $value = $this->object->countItems();
        $this->assertEquals($value, 2);
        $value = $this->object->countItems(true);
        $this->assertEquals($value, 11);
    }

    /**
     *  Test la méthode qui retourne le prix total du panier
     */
    public function testGetTotalPrice() {
        $value = $this->object->getTotalPrice();
        $this->assertEquals($value, 1014.9);
    }

    /**
     *  Test la méthode qui retourne le poids du panier
     */
    public function testGetTotalWeight() {
        $value = $this->object->getTotalWeight();
        $this->assertEquals($value, 140);
    }


    /**
     * Test de la méthode qui retourne tous les article du panier
     */
    public function testGetItems()
    {
        $items = $this->object->getItems();
        $this->assertEquals(count($items), 2);
    }


    /**
     *  Test la méthode qui vide la panier
     */
    public function testClear() {
        $this->object->clear();
        $isEmpty = $this->object->isEmpty();
        $this->assertTrue($isEmpty);
    }

}

?>
