<?php

/**
 * IStoreItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    i-store
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class IStoreItem extends BaseIStoreItem
{
    /**
     *  Remplace les caractères non ASCII du nom de l'article
     *      par le caractère -
     *
     * @return <type>
     */
    public function getNameSlug()
    {
      return IStore::slugify($this->getName());
    }

    /**
     *  Remplace les caractères non ASCII de la marque de l'article
     *      par le caractère -
     *
     * @return <type>
     */
    public function getBrandSlug()
    {
      return IStore::slugify($this->getIStoreBrand());
    }

    /**
     *  Remplace les caractères non ASCII de la description courte
     *       de l'article par le caractère -
     *
     * @return <type>
     */
    public function getDescriptionSlug()
    {
      return IStore::slugify($this->getShortDescription());
    }

    /**
     *   Retourne un tableau formaté des caractéristiques d'un article
     *
     * @param string $detailsXml   Détails de l'article dans le format XML
     * @return array()   Détail de l'article (ensemble des caractéristiques dans
     *      un tableau formaté
     */
    public static function formatDetails($detailsXml)
    {
        // initialisation
        $details = array();
        $keepTrying = true;
        $i = 1;
        $detailsXml = '<?xml version="1.0" encoding="ISO-8859-1"?>' . html_entity_decode($detailsXml);

        // on charge les librairies de Zend Framework
        ProjectConfiguration::registerZend();
        
        // on format les details de l'article
        do
        {
            try {
                // on recupere une à une les caractéristiques de l'article
                $caract = new Zend_Config_Xml($detailsXml, 'caract_' . $i);
                $details[] = $caract->toArray();
                $i++;
            } catch (Zend_Config_Exception $e) {
                $keepTrying = false;
            }
        } while ($keepTrying);
        
        return $details;
    }

    /**
     *  Personnalise la serialisation d'un article en base
     *      de données
     *
     * @param Doctrine_Connection $conn  Connexion à la base de données par Doctrine
     */
    public function save(Doctrine_Connection $conn = null)
    {
        /**
         *  Effectue une transaction afin de sauvegarder de serialiser
         *      l'article dans la base de données et dans le fichier
         *      index de Zend Lucene de façon cohérent.
         *  Si une erreur se produit, la serialisation de l'article
         *      est annulé
         */
        $conn = $conn ? $conn : Doctrine_Core::getTable('IStoreItem')->getConnection();
        $conn->beginTransaction();
        try
        {
            $ret = parent::save($conn);

            // met à jour le fichier index du moteur de recherche
            //   Zend Lucene lors de la serialisation d'un article
            //   en base de données
            $this->updateLuceneIndex();

            $conn->commit();

            return $ret;
        }
        catch (Exception $e)
        {
            $conn->rollBack();
            throw $e;
        }
    }

    /**
     *  Personnalise la suppression d'un article dans la base de données
     *
     * @param Doctrine_Connection $conn  Connexion à la base de données par Doctrine
     */
    public function delete(Doctrine_Connection $conn = null)
    {
      $index = IStoreItem::getLuceneIndex();

      // supprime l'article du fichier index Zend Lucene
      foreach ($index->find('pk:'.$this->getId()) as $hit)
      {
        $index->delete($hit->id);
      }

      return parent::delete($conn);
    }

    /**
     *  Met à jour l'index des articles dans le moteur de recherche
     *      Zend_Lucene
     */
    public function updateLuceneIndex()
    {
        $index = IStoreItemTable::getLuceneIndex();

        // supprime l'entrée existante dans l'index
        foreach ($index->find('pk:'.$this->getId()) as $hit)
        {
            $index->delete($hit->id);
        }

        // pas d'entrée dans l'index si l'article n'est plus activé
        if (!$this->getIsActivated())
        {
            return;
        }

        $doc = new Zend_Search_Lucene_Document();

        // stocke la clé primaire de l'article pour l'identifier dans les résultats de la recherche
        $doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));

        // index les champs de l'article
        $doc->addField(Zend_Search_Lucene_Field::UnStored('name', $this->getName(), 'utf-8'));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('short_description', $this->getShortDescription(), 'utf-8'));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('brand', $this->getIStoreBrand(), 'utf-8'));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('description', $this->getDescription(), 'utf-8'));

        // ajoute l'article à l'index
        $index->addDocument($doc);
        $index->commit();
    }
}
